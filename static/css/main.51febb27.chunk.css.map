{"version":3,"sources":["main.51febb27.chunk.css","index.css","components/nav.scss","variables.scss","components/banner.scss","components/footer.scss","components/home.scss","App.scss","components/brakepoints.scss"],"names":[],"mappings":"AAAA,2GAA2G,CCA3G,KACE,QAAS,CACT,mJAEY,CACZ,kCAAmC,CACnC,iCACF,CAEA,KACE,yEAEF,CCZA,KACE,qCCC+B,CDFjC,SAGI,YAAa,CACb,4BAA6B,CAC7B,kBAAmB,CACnB,eAAgB,CAChB,kBCDe,CDEf,UCLQ,CDHZ,eAUM,UAAW,CAVjB,oBAaM,SAAU,CACV,YAAa,CACb,4BAA6B,CAC7B,kBAAmB,CACnB,eAAgB,CACjB,OAKG,UCpBI,CDsBJ,kBAAmB,CACnB,wBAAyB,CAC1B,oBAHC,oBCnBK,CDsBN,aAGC,aCzBK,CD0BN,QE9BL,YAAa,CACb,sBAAuB,CACvB,eAAgB,CAChB,cAAe,CACf,8JAAuK,CACvK,2BAA4B,CAC5B,2BAA4B,CAC5B,uBAA2B,CAR7B,qBAUI,iBAAkB,CAVtB,wBAYM,UDTM,CCUN,cAAe,CACf,QAAS,CACT,wBAAkC,CAfxC,oBAmBI,kBDdS,CCeT,qBDjBQ,CCkBR,iBAAkB,CAClB,iBAAkB,CAClB,iBAAkB,CAClB,oBAAqB,CACrB,oBAAqB,CACrB,cAAe,CA1BnB,sBA6BI,UD1BQ,CC2BR,oBAAqB,CA9BzB,0BAiCI,kBD3Be,CC4Bf,aD7BS,CC8BT,SAAS,CACT,6CAA+C,CAChD,QCpCD,UAAW,CACX,cAAe,CACf,eAAgB,CAEhB,4BAA6B,CAE7B,kBFDiB,CENnB,2BAIE,YAAa,CAEb,kBFHU,CEHZ,mBAUI,qBAAsB,CAEtB,YAAa,CACb,cAAe,CACf,eAAgB,CAChB,UFZQ,CEaT,QCfD,cAAe,CACf,YAAa,CACb,qBAAsB,CAHxB,eAKI,YAAa,CACb,4BAA6B,CAC7B,iBAAkB,CAPtB,2BASM,SAAU,CACV,WAAY,CACZ,YAAa,CAXnB,mBAcI,WAAY,CACZ,YAAa,CACb,iBAAkB,CAClB,cAAe,CCPnB,EACE,qBAAsB,CACtB,QAAS,CACT,SAAU,CACX,UAIC,wBAAiB,CAAjB,qBAAiB,CAAjB,oBAAiB,CAAjB,gBAAiB,CACjB,kBJZa,CIab,wBAAyB,CAAzB,wBAAyB,CACzB,QAAS,CACT,kKAE8B,CAC9B,kCAAmC,CACnC,iCAAkC,CACnC,WAGC,YAAa,CACb,gBAAiB,CACjB,aAAc,CACd,eAAgB,CAChB,kBJ3Ba,CI4Bb,YAAa,CAad,0BAnBC,WAQE,YAAa,CACb,gBAAiB,CAUpB,CC8DC,0BDjFA,WAYE,YAAa,CACb,gBAAiB,CAMpB,CC8DC,0BDjFA,WAgBE,UAAW,CACX,cAAe,CAElB","file":"main.51febb27.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,700;1,300;1,400&display=swap);\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n\n.nav{font-family:\"Josefin Sans\",sans-serif}.nav nav{display:flex;justify-content:space-around;align-items:center;min-height:10vh;background:#DB75C5;color:#fff}.nav nav .logo{width:64px}.nav nav .nav-links{width:40%;display:flex;justify-content:space-around;align-items:center;list-style:none}.nav a{color:#fff;text-decoration:none;letter-spacing:3px;text-transform:uppercase}nav li:hover{text-decoration:none;color:#6A1051}.banner{display:flex;justify-content:center;min-height:50vh;min-width:100%;background-image:linear-gradient(rgba(150,150,150,0.3), rgba(150,150,150,0.3)),url(\"https://res.cloudinary.com/daf8fgekl/image/upload/v1597908882/gozero_pu9y9b.png\");background-repeat:no-repeat;background-attachment:fixed;background-position:center}.banner .banner-text{align-self:center}.banner .banner-text h1{color:#fff;font-size:48px;margin:0;text-shadow:2px 2px #000}.banner .banner-btn{background:#6A1051;border:1px solid #fff;border-radius:8px;padding:15px 32px;text-align:center;text-decoration:none;display:inline-block;font-size:16px}.banner .banner-btn a{color:#fff;text-decoration:none}.banner .banner-btn:hover{background:#DB75C5;color:#6A1051;outline:0;transition:color, background-color 3s ease-out}.footer{width:100%;min-height:4vh;margin-top:auto;display:flex;justify-content:space-around;align-items:center;background:#DB75C5}.footer .impressum{display:flex;flex-direction:column;align-items:center;padding:12px;font-size:12px;list-style:none;color:#fff}.tweets{min-width:100%;display:flex;flex-direction:column}.tweets .tweet{display:flex;justify-content:space-around;align-item:center}.tweets .tweet .tweet-text{width:50%;margin:auto;padding:32px}.tweets .tweet img{width:400px;height:400px;border-radius:50%;margin:3% auto}*{box-sizing:border-box;margin:0;padding:0}body,html{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background:#FFF5DB;-ms-scroll-chaining:none;overscroll-behavior:none;margin:0;font-family:\"Josefin Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.container{width:1560px;min-width:1560px;margin:0 auto;min-height:100%;background:#FFF5DB;height:300vh}@media (max-width: 1560px){.container{width:1280px;min-width:1280px}}@media (max-width: 1366px){.container{width:1080px;min-width:1080px}}@media (max-width: 1080px){.container{width:100%;min-width:100%}}\n\n","body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n",".nav {\n  font-family: $font;\n  nav {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    min-height: 10vh;\n    background: $light-red;\n    color: $white;\n    .logo {\n      width: 64px;\n    }\n    .nav-links {\n      width: 40%;\n      display: flex;\n      justify-content: space-around;\n      align-items: center;\n      list-style: none;\n    }\n  }\n}\n\n      .nav a {\n        color: $white;\n        text-decoration: none;\n        letter-spacing: 3px;\n        text-transform: uppercase;\n      }\n      nav li:hover {\n        text-decoration: none;\n        color: $red;\n      }\n\n\n\n","@import url('https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,700;1,300;1,400&display=swap');\n\n$font: 'Josefin Sans', sans-serif;\n$white: #FFF;\n$black: #000;\n$red: #6A1051;\n$light-red: #DB75C5;\n$beige: #FFF5DB;\n",".banner {\n  display: flex;\n  justify-content: center;\n  min-height: 50vh;\n  min-width: 100%;\n  background-image: linear-gradient(rgba(150,150,150,0.3), rgba(150,150,150,0.3)), url(\"https://res.cloudinary.com/daf8fgekl/image/upload/v1597908882/gozero_pu9y9b.png\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: center;\n  .banner-text {\n    align-self: center;\n    h1 {\n      color: $white;\n      font-size: 48px;\n      margin: 0;\n      text-shadow: 2px 2px rgb(0,0,0.01);\n    }\n  }\n  .banner-btn {\n    background: $red;\n    border: 1px solid $white;\n    border-radius: 8px;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n  }\n  .banner-btn a {\n    color: $white;\n    text-decoration: none;\n  }\n  .banner-btn:hover {\n    background: $light-red;\n    color: $red;\n    outline:0;\n    transition: color, background-color 3s ease-out;\n  }\n}\n\n",".footer {\n  width: 100%;\n  min-height: 4vh;\n  margin-top: auto;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  background: $light-red;\n  .impressum {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 12px;\n    font-size: 12px;\n    list-style: none;\n    color: $white;\n  }\n}\n\n",".tweets {\n  min-width: 100%;\n  display: flex;\n  flex-direction: column;\n  .tweet {\n    display: flex;\n    justify-content: space-around;\n    align-item: center;\n    .tweet-text {\n      width: 50%;\n      margin: auto;\n      padding: 32px;\n    }\n    img {\n    width: 400px;\n    height: 400px;\n    border-radius: 50%;\n    margin: 3% auto;\n    }\n  }\n}\n","@import \"variables.scss\";\n@import \"./components/brakepoints.scss\";\n@import \"./components/nav.scss\";\n@import \"./components/banner.scss\";\n@import \"./components/footer.scss\";\n@import \"./components/home.scss\";\n@import \"./components/about.scss\";\n@import \"./components/easyswaps.scss\";\n@import \"./components/contact.scss\";\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody,\nhtml {\n  user-select: none;\n  background: $beige;\n  overscroll-behavior: none;\n  margin: 0;\n  font-family: \"Josefin Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\",\n    \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\",\n    \"Helvetica Neue\", sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n  .container {\n  width: 1560px;\n  min-width: 1560px;\n  margin: 0 auto;\n  min-height: 100%;\n  background: $beige;\n  height: 300vh;\n  @include media(\"<=1560px\") {\n    width: 1280px;\n    min-width: 1280px;\n  }\n  @include media(\"<=desktop\") {\n    width: 1080px;\n    min-width: 1080px;\n  }\n  @include media(\"<=1080px\") {\n    width: 100%;\n    min-width: 100%;\n  }\n}\n\n","$breakpoints: (\n  \"phone\": 360px,\n  \"tablet\": 768px,\n  \"desktop\": 1366px,\n  \"LGdesktop\": 1920px\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///   'retina2x': (\n///     '(-webkit-min-device-pixel-ratio: 2)',\n///     '(min-resolution: 192dpi)'\n///   )\n/// );\n///\n$media-expressions: (\n  \"screen\": \"screen\",\n  \"print\": \"print\",\n  \"handheld\": \"handheld\",\n  \"retina2x\": (\n    \"(-webkit-min-device-pixel-ratio: 2)\",\n    \"(min-resolution: 192dpi)\"\n  ),\n  \"retina3x\": (\n    \"(-webkit-min-device-pixel-ratio: 3)\",\n    \"(min-resolution: 350dpi)\"\n  )\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media(\">128px\") {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media(\">20em\") {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media(\">2.0rem\") {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  \"px\": 1,\n  \"em\": 0.01,\n  \"rem\": 0.1\n) !default;\n///\n/// Generates a media query based on a list of conditions\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media(\">phone\") { }\n///\n/// @example scss - With two set breakpoints\n///  @include media(\">phone\", \"<=tablet\") { }\n///\n/// @example scss - With custom values\n///  @include media(\">=358px\", \"<850px\") { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media(\">desktop\", \"<=1350px\") { }\n///\n/// @example scss - With a static expression\n///  @include media(\"retina2x\") { }\n///\n/// @example scss - Mixing everything\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\n///\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth(\n      $conditions,\n      $i,\n      parse-expression(nth($conditions, $i))\n    );\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: \"\";\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + \", \";\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n///\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $expressions  - list of expressions\n///\n/// @throws `$expression` is not a valid expression\n///\n/// @return {List | Null}\n///\n@function get-query-branches($expressions) {\n  $result: \"\";\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + \" and \";\n    }\n\n    @if (type-of($expression) == \"string\") {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == \"list\") {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == \"list\") {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join(\n                $result,\n                str-replace-first($first, $member, $partial)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n///\n/// Parses a string to form a media query expression\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $expression  - expression (in string)\n///\n/// @throws Expression with type `type-of($expression)` detected, string expected\n/// @throws `$expression` is missing an operator\n/// @throws Unknown unit: `$unit`\n///\n/// @return {String | Null}\n///\n@function parse-expression($expression) {\n  $operator: \"\";\n  $value: \"\";\n  $element: \"\";\n  $result: \"\";\n  $is-width: true;\n\n  @if (type-of($expression) != \"string\") {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == \"=\") {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n\n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    }\n\n    @if ($operator == \">\") {\n      $element: \"(min-width: #{$result + $interval})\";\n    } @else if ($operator == \"<\") {\n      $element: \"(max-width: #{$result - $interval})\";\n    } @else if ($operator == \">=\") {\n      $element: \"(min-width: #{$result})\";\n    } @else if ($operator == \"<=\") {\n      $element: \"(max-width: #{$result})\";\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n///\n/// Replaces the first occurence of the string with the replacement string\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $search  - The value being searched for\n/// @param {String}   $replace  - The replacement string\n/// @param {String}   $subject  - The string being replaced on\n///\n/// @return {String | Null}\n///\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n///\n/// Casts a number to a string\n///\n/// @author Hugo Giraudel\n///\n/// @param {String}   $string  - Number to be parsed\n///\n/// @return {List | Null}\n///\n@function to-number($string) {\n  // Matrices\n  $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\n  $numbers: 0 1 2 3 4 5 6 7 8 9;\n\n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n\n    @if $character == \"-\" {\n      $minus: true;\n    } @else if $character == \".\" {\n      $divider: 1;\n    } @else {\n      @if type-of($index) != \"number\" {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n\n      @if $divider == 0 {\n        $result: $result * 10;\n      } @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n\n      $result: $result + $number;\n    }\n  }\n\n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\n    \"vh\" \"vmin\" \"vmax\";\n  $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\n  $index: index($strings, $unit);\n\n  @if type-of($index) != \"number\" {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n\n  @return $number * nth($units, $index);\n}\n\n/**\n*\n* Testing\n*\n**/\n"]}