{"version":3,"sources":["components/Nav.js","components/Footer.js","pages/Home.js","pages/About.js","pages/Recipies.js","pages/Easyswaps.js","pages/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","className","to","src","alt","style","Footer","Home","About","Recipies","EasySwaps","Contact","App","path","exact","component","Easyswaps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PAqCeA,MAjCf,WAEE,IAAMC,EAAW,CACfC,MAAO,SAGT,OACE,yBAAKC,UAAU,OACb,6BACE,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAG,KACP,yBAAKC,IAAI,GAAGC,IAAI,uBAGlB,wBAAIH,UAAU,aACZ,kBAAC,IAAD,CAAMI,MAAON,EAAUG,GAAG,UACxB,sCAEF,kBAAC,IAAD,CAAMG,MAAON,EAAUG,GAAG,aACxB,yCAEF,kBAAC,IAAD,CAAMG,MAAON,EAAUG,GAAG,cACxB,0CAEF,kBAAC,IAAD,CAAMG,MAAON,EAAUG,GAAG,YACxB,4CCjBCI,MAVf,WACE,OACE,yBAAKL,UAAU,UACb,yBAAKA,UAAU,aACb,6CCgBOM,MAlBf,WACE,OACE,yBAAKN,UAAU,QACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,eACb,mDACE,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAMC,GAAG,YAAT,cAIN,yBAAKD,UAAU,aACd,yBAAKA,UAAU,cCJTO,MAVf,WACE,OACE,yBAAKP,UAAU,SACb,yBAAKA,UAAU,aACb,wCCMOQ,MAVf,WACE,OACE,yBAAKR,UAAU,YACb,yBAAKA,UAAU,aACb,2CCMOS,MAVf,WACE,OACE,yBAAKT,UAAU,aACb,yBAAKA,UAAU,aACb,4CCMOU,MAVf,WACE,OACE,yBAAKV,UAAU,WACb,yBAAKA,UAAU,aACb,0CC2BOW,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,MACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,KAAK,IAAIC,OAAK,EAACC,UAAWR,IACjC,kBAAC,IAAD,CAAOM,KAAK,SAASE,UAAWP,IAChC,kBAAC,IAAD,CAAOK,KAAK,YAAYE,UAAWN,IACnC,kBAAC,IAAD,CAAOI,KAAK,aAAaE,UAAWC,IACpC,kBAAC,IAAD,CAAOH,KAAK,WAAWE,UAAWJ,KAEtC,kBAAC,EAAD,SCfUM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4e2cef70.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nfunction Nav() {\n\n  const navStyle = {\n    color: 'white'\n  }\n\n  return (\n    <div className=\"nav\">\n      <nav>\n        <div className=\"logo\">\n          <Link to=\"/\">\n            <img src=\"\" alt=\"gozerostayfluffy\" />\n          </Link>\n        </div>\n          <ul className=\"nav-links\">\n            <Link style={navStyle} to=\"/about\">\n              <li>About</li>\n            </Link>\n            <Link style={navStyle} to=\"/recipies\">\n              <li>Recipies</li>\n            </Link>\n            <Link style={navStyle} to=\"/easyswaps\">\n              <li>Easyswaps</li>\n            </Link>\n            <Link style={navStyle} to=\"/contact\">\n              <li>Contact</li>\n            </Link>\n          </ul>\n      </nav>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n    <div className=\"footer\">\n      <div className=\"impressum\">\n        <p>Regula Popp</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nfunction Home() {\n  return (\n    <div className=\"Home\">\n      <div className=\"banner\">\n        <div className=\"banner-text\">\n          <h1>Go zero stay fluffy</h1>\n            <div className=\"banner-btn\">\n              <Link to=\"/contact\">Go zero</Link>\n            </div>\n        </div>\n      </div>\n        <div className=\"container\">\n         <div className=\"tweets\"></div>\n        </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction About() {\n  return (\n    <div className=\"About\">\n      <div className=\"container\">\n        <h1>About</h1>\n      </div>\n    </div>\n  )\n}\n\nexport default About;\n","import React from 'react';\n\nfunction Recipies() {\n  return (\n    <div className=\"Recipies\">\n      <div className=\"container\">\n        <h1>Recipies</h1>\n      </div>\n    </div>\n  )\n}\n\nexport default Recipies;\n","import React from 'react';\n\nfunction EasySwaps() {\n  return (\n    <div className=\"EasySwaps\">\n      <div className=\"container\">\n        <h1>EasySwaps</h1>\n      </div>\n    </div>\n  )\n}\n\nexport default EasySwaps;\n","import React from 'react';\n\nfunction Contact() {\n  return (\n    <div className=\"Contact\">\n      <div className=\"container\">\n        <h1>Contact</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default Contact;\n","import React from 'react';\nimport './styles/App.scss';\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Nav from './components/Nav';\nimport Footer from './components/Footer';\nimport Home from './pages/Home';\nimport About from './pages/About';\nimport Recipies from './pages/Recipies';\nimport Easyswaps from './pages/Easyswaps';\nimport Contact from './pages/Contact';\n\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/about\" component={About} />\n              <Route path=\"/recipies\" component={Recipies} />\n              <Route path=\"/easyswaps\" component={Easyswaps} />\n              <Route path=\"/contact\" component={Contact} />\n            </Switch>\n          <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}